{"version":3,"sources":["../src/Server.js"],"names":["dotenv","config","Server","constructor","PORT","process","env","server","app","connectedDB","middleware","paths","notes","routers","use","express","json","then","console","log","error","Notes","listen","err","Error","close"],"mappings":"yZAOAA,mBAAOC,MAAP,E,CAEA,KAAMC,CAAAA,MAAO,CACTC,WAAW,EAAE,CACT,KAAKC,IAAL,CAAaC,OAAO,CAACC,GAAR,CAAYF,IADhB,CAET,KAAKG,MAFI,CAGT,KAAKC,GAAL,CAAW,yBAHF,CAIT,KAAKC,WAAL,EAJS,CAKT,KAAKC,UAAL,EALS,CAMT,KAAKC,KAAL,CAAa,CACTC,KAAK,CAAC,YADG,CANJ,CAST,KAAKC,OAAL,EACH,CAEDH,UAAU,EAAE,CACR,KAAKF,GAAL,CAASM,GAAT,CAAa,sBAAb,CADQ,CAER,KAAKN,GAAL,CAASM,GAAT,CAAcC,oBAAQC,IAAR,EAAd,CAFQ,CAGR,KAAKR,GAAL,CAASM,GAAT,CAAcC,8BAAe,QAAf,CAAd,CACH,CAEDN,WAAW,EAAE,CACT,8BACKQ,IADL,CACUC,OAAO,CAACC,GAAR,CAAY,4BAAZ,CADV,WAEWD,OAAO,CAACE,KAFnB,CAGH,CAEDP,OAAO,EAAE,CACL,KAAKL,GAAL,CAASM,GAAT,CAAa,KAAKH,KAAL,CAAWC,KAAxB,CAA+BS,iBAA/B,CACH,CAEDC,MAAM,EAAE,CACJ,KAAKf,MAAL,CAAe,KAAKC,GAAL,CAASc,MAAT,CAAiB,KAAKlB,IAAtB,CAA8BmB,CAAD,EAAS,CACjD,GAAGA,CAAH,CAAS,KAAM,IAAIC,CAAAA,KAAJ,CAAU,gBAAV,CAAN,CACTN,OAAO,CAACC,GAAR,CAAY,0BAA2B,KAAKf,IAA5C,CACH,CAHc,CAIlB,CAEDqB,KAAK,EAAE,CACH,KAAKlB,MAAL,CAAYkB,KAAZ,EACH,CAtCQ,C,aA2CEvB,M","sourcesContent":["import express from 'express'; \r\nimport cors from 'cors';\r\nimport dotenv from 'dotenv';\r\n\r\nimport { connectionsDataBase } from './db/DB';\r\nimport Notes from './routes/notes';\r\n\r\ndotenv.config();\r\n\r\nclass Server {\r\n    constructor(){\r\n        this.PORT  = process.env.PORT;\r\n        this.server;\r\n        this.app = express();\r\n        this.connectedDB();\r\n        this.middleware(); \r\n        this.paths = {\r\n            notes:'/api/notes'\r\n        };\r\n        this.routers();\r\n    }\r\n\r\n    middleware(){\r\n        this.app.use(cors () );\r\n        this.app.use( express.json() );\r\n        this.app.use( express.static('public') );\r\n    }\r\n    \r\n    connectedDB(){\r\n        connectionsDataBase()\r\n            .then(console.log('connected to the data_base'))\r\n            .catch(console.error);\r\n    }\r\n\r\n    routers(){\r\n        this.app.use(this.paths.notes, Notes );\r\n    }\r\n    \r\n    listen(){\r\n        this.server =  this.app.listen( this.PORT , (err) => {\r\n            if(err)  throw new Error('Server OFFLINE');\r\n            console.log('Server running on port '+ this.PORT);\r\n        });\r\n    }\r\n\r\n    close(){\r\n        this.server.close();\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default Server;"],"file":"Server.js"}